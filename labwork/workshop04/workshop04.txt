WORKSHOP 4                        ENGR9881 - Computer Networks
Name: Joel Pillar-Rogers
FAN: pill0032
Date: 21/5/2020


CHECKPOINT 1:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

void usage(char* str){ 
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n", str);
}

int main(int argc, char *argv[])
{
    int flags, opt;
    int nsecs, tfnd;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    while ((opt = getopt(argc, argv, "nt:")) != -1)
    {
        switch (opt)
        {
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        // ? is returned by getopt if option character is not in opstring, or option had no argument that required one
        case '?':   // seems a but redunant, will get picked up by default. better to use : at start of opstring to separate behaviours
            usage("./task1"); 
            exit(EXIT_FAILURE);
        default: 
            usage("./task1"); 
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\n",flags, tfnd, nsecs, optind);

    if(optind >= argc)
    {
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    exit(EXIT_SUCCESS);
}

******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1
Usage: ./task1 [-t nsecs] [-n] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 joel
flags=0; tfnd=0; nsecs=0; optind=1
name argument = joel

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -n joel
flags=1; tfnd=0; nsecs=0; optind=2
name argument = joel

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -n
flags=1; tfnd=0; nsecs=0; optind=2
Expected argument after options

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t
./task1: option requires an argument -- 't'
Usage: ./task1 [-t nsecs] [-n] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t joel
flags=0; tfnd=1; nsecs=0; optind=3
Expected argument after options

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t 100 joel
flags=0; tfnd=1; nsecs=100; optind=3
name argument = joel



CHECKPOINT 2:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>

#define BUFFER_SIZE 1000

void usage(const char *str){
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] [-i filename] name\n", str);
}

int main(int argc, char *argv[]){
    const char *TASK = "./task2";
    int flags, fflags, opt;
    int nsecs, tfnd, fd, n;
    char *filename = "";
    char *buffer = "";
    fd = 0;
    n = 0;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    fflags = 0;

    if (argc < 2){
        usage(TASK);
        exit(EXIT_FAILURE);
    }

    while ((opt = getopt(argc, argv, "nt:i:")) != -1){
        switch (opt){
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        case 'i':
            filename = optarg;
            fflags = 1;
            break;
        case '?':
            usage(TASK);
            exit(EXIT_FAILURE);
        default:
            usage(TASK);
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; fflags=%d; optind=%d\n", flags, tfnd, nsecs, fflags, optind);

    if (optind >= argc){
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    if (fflags){
        printf("filename argument = %s\n", filename);
        if((fd = open(filename, O_RDONLY)) == -1){
            fprintf(stderr, "Enter a valid filename\n");
            exit(EXIT_FAILURE);
        }
        
        buffer = (char *)malloc(BUFFER_SIZE); 
        if (buffer == NULL){
            exit(1);
        }

        while((n = read(fd, buffer, BUFFER_SIZE)) > 0){                         
            write(STDIN_FILENO, buffer, n); 
        }
        printf("\n");

        free(buffer);
        buffer = NULL;
        close(fd);
    }
    else {
        printf("No file submitted\n");
    }
    exit(EXIT_SUCCESS);
}

******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2
Usage: ./task2 [-t nsecs] [-n] [-i filename] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i
./task2: option requires an argument -- 'i'
Usage: ./task2 [-t nsecs] [-n] [-i filename] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i file name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = file
Enter a valid filename

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i words.txt name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = words.txt
these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:



CHECKPOINT 3:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/time.h>

#define BUFFER_SIZE 1000

void usage(const char *str){
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] [-i filename] name\n", str);
}

int main(int argc, char *argv[]){
    const char *TASK = "./task2";
    int flags, fflags, opt;
    int nsecs, tfnd, fd, n;
    char *filename = "";
    char *buffer = "";
    fd = 0;
    n = 0;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    fflags = 0;

    if (argc < 2){
        usage(TASK);
        exit(EXIT_FAILURE);
    }

    while ((opt = getopt(argc, argv, "nt:i:")) != -1){
        switch (opt){
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        case 'i':
            filename = optarg;
            fflags = 1;
            break;
        case '?':
            usage(TASK);
            exit(EXIT_FAILURE);
        default:
            usage(TASK);
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; fflags=%d; optind=%d\n", flags, tfnd, nsecs, fflags, optind);

    if (optind >= argc){
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    if (fflags){
        printf("filename argument = %s\n", filename);
        printf("\n");

        /* declare variables and get start time of operation */
        long totTime = 0;
        long avgTime = 0;
        int loops = 100000;
        struct timeval t1;
        struct timeval t2;
        gettimeofday(&t1, NULL);

        /* main loop */
        for (int i = 0; i<loops; ++i){

            /* allocate memory */
            buffer = (char *)malloc(BUFFER_SIZE); 
            if (buffer == NULL){
                exit(1);
            }

            /*open file*/
            if((fd = open(filename, O_RDONLY)) == -1){
                fprintf(stderr, "Enter a valid filename\n");
                exit(EXIT_FAILURE);
            } 

            /* read content of file into buffer*/
            while((n = read(fd, buffer, BUFFER_SIZE)) > 0){   
                /* print buffer*/                      
                write(STDIN_FILENO, buffer, n); 
            }
            printf("\n");
            printf("\n");

            /* close file*/
            close(fd);

            /* free memory */
            free(buffer);
            buffer = NULL;
        }
        /* get finish time of operation */
        gettimeofday(&t2, NULL);

        /* calculate total andd average times*/
        totTime = 1000000 * (t2.tv_sec - t1.tv_sec);
        totTime += (t2.tv_usec - t1.tv_usec); 
        avgTime = totTime / loops;

        /* display elapsed time for operations */
        printf("loops: %d\n",loops);
        printf("elapsed time (usecs): %ld\n",totTime);
        printf("average time per loop (usecs): %ld\n",avgTime);
    }
    else {
        printf("No file submitted\n");
    }
    exit(EXIT_SUCCESS);
}


******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task3 -i words.txt name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = words.txt
these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:

...etc...

these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:

loops: 100000
elapsed time (usecs): 5275368
average time per loop (usecs): 52



CHECKPOINT 4:
******* Source Code *******



******* CLI Output *******




CHECKPOINT 5:
******* Source Code *******




******* CLI Output *******






******* Makefile *******
task1: task1.c
	gcc task1.c -o task1 -std=c99 -Wall

task2a: task2a.c
	gcc task2a.c -o task2a -std=c99 -Wall

task2b: task2b.c
	gcc task2b.c -o task2b -std=c99 -Wall

task3a: task3a.c
	gcc task3a.c -o task3a -std=c99 -Wall

task3b: task3b.c
	gcc task3b.c -o task3b -std=c99 -Wall

task4a: task4a.c
	gcc task4a.c -o task4a -std=c99 -Wall

task4b: task4b.c
	gcc task4b.c -o task4b -std=c99 -Wall

test5: task5
	./task5

clean5:
	rm task5 task5.o reverse.o

task5: reverse.o task5.o 
	gcc -o task5 task5.o reverse.o -Wall

task5.o: task5.c ctap.h reverse.h
	gcc -c -o task5.o task5.c -Wall

reverse.o: reverse.c reverse.h
	gcc -c -o reverse.o reverse.c -Wall
