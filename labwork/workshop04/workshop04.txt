WORKSHOP 4                        ENGR9881 - Computer Networks
Name: Joel Pillar-Rogers
FAN: pill0032
Date: 21/5/2020


CHECKPOINT 1:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

void usage(char* str){ 
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n", str);
}

int main(int argc, char *argv[])
{
    int flags, opt;
    int nsecs, tfnd;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    while ((opt = getopt(argc, argv, "nt:")) != -1)
    {
        switch (opt)
        {
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        // ? is returned by getopt if option character is not in opstring, or option had no argument that required one
        case '?':   // seems a but redunant, will get picked up by default. better to use : at start of opstring to separate behaviours
            usage("./task1"); 
            exit(EXIT_FAILURE);
        default: 
            usage("./task1"); 
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\n",flags, tfnd, nsecs, optind);

    if(optind >= argc)
    {
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    exit(EXIT_SUCCESS);
}

******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1
Usage: ./task1 [-t nsecs] [-n] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 joel
flags=0; tfnd=0; nsecs=0; optind=1
name argument = joel

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -n joel
flags=1; tfnd=0; nsecs=0; optind=2
name argument = joel

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -n
flags=1; tfnd=0; nsecs=0; optind=2
Expected argument after options

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t
./task1: option requires an argument -- 't'
Usage: ./task1 [-t nsecs] [-n] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t joel
flags=0; tfnd=1; nsecs=0; optind=3
Expected argument after options

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task1 -t 100 joel
flags=0; tfnd=1; nsecs=100; optind=3
name argument = joel



CHECKPOINT 2:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>

#define BUFFER_SIZE 1000

void usage(const char *str){
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] [-i filename] name\n", str);
}

int main(int argc, char *argv[]){
    const char *TASK = "./task2";
    int flags, fflags, opt;
    int nsecs, tfnd, fd, n;
    char *filename = "";
    char *buffer = "";
    fd = 0;
    n = 0;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    fflags = 0;

    if (argc < 2){
        usage(TASK);
        exit(EXIT_FAILURE);
    }

    while ((opt = getopt(argc, argv, "nt:i:")) != -1){
        switch (opt){
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        case 'i':
            filename = optarg;
            fflags = 1;
            break;
        case '?':
            usage(TASK);
            exit(EXIT_FAILURE);
        default:
            usage(TASK);
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; fflags=%d; optind=%d\n", flags, tfnd, nsecs, fflags, optind);

    if (optind >= argc){
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    if (fflags){
        printf("filename argument = %s\n", filename);
        if((fd = open(filename, O_RDONLY)) == -1){
            fprintf(stderr, "Enter a valid filename\n");
            exit(EXIT_FAILURE);
        }
        
        buffer = (char *)malloc(BUFFER_SIZE); 
        if (buffer == NULL){
            exit(1);
        }

        while((n = read(fd, buffer, BUFFER_SIZE)) > 0){                         
            write(STDIN_FILENO, buffer, n); 
        }
        printf("\n");

        free(buffer);
        buffer = NULL;
        close(fd);
    }
    else {
        printf("No file submitted\n");
    }
    exit(EXIT_SUCCESS);
}

******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2
Usage: ./task2 [-t nsecs] [-n] [-i filename] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i
./task2: option requires an argument -- 'i'
Usage: ./task2 [-t nsecs] [-n] [-i filename] name

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i file name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = file
Enter a valid filename

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task2 -i words.txt name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = words.txt
these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:



CHECKPOINT 3:
******* Source Code *******
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/time.h>

#define BUFFER_SIZE 1000

void usage(const char *str){
    fprintf(stderr, "Usage: %s [-t nsecs] [-n] [-i filename] name\n", str);
}

int main(int argc, char *argv[]){
    const char *TASK = "./task3";
    int flags, fflags, opt;
    int nsecs, tfnd, fd, n;
    char *filename = "";
    char *buffer = "";
    fd = 0;
    n = 0;
    nsecs = 0;
    tfnd = 0;
    flags = 0;
    fflags = 0;

    if (argc < 2){
        usage(TASK);
        exit(EXIT_FAILURE);
    }

    while ((opt = getopt(argc, argv, "nt:i:")) != -1){
        switch (opt){
        case 'n':
            flags = 1;
            break;
        case 't':
            nsecs = atoi(optarg);
            tfnd = 1;
            break;
        case 'i':
            filename = optarg;
            fflags = 1;
            break;
        case '?':
            usage(TASK);
            exit(EXIT_FAILURE);
        default:
            usage(TASK);
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; tfnd=%d; nsecs=%d; fflags=%d; optind=%d\n", flags, tfnd, nsecs, fflags, optind);

    if (optind >= argc){
        fprintf(stderr, "Expected argument after options\n");
        exit(EXIT_FAILURE);
    }

    printf("name argument = %s\n", argv[optind]);

    if (fflags){
        printf("filename argument = %s\n", filename);
        printf("\n");

        /* declare variables and get start time of operation */
        const int loops = 100000;
        long totTime = 0;
        long avgTime = 0;
        struct timeval t1;
        struct timeval t2;
        gettimeofday(&t1, NULL);

        /* main loop */
        for (int i = 0; i<loops; ++i){

            /* allocate memory */
            buffer = (char *)malloc(BUFFER_SIZE); 
            if (buffer == NULL){
                exit(1);
            }

            /*open file*/
            if((fd = open(filename, O_RDONLY)) == -1){
                fprintf(stderr, "Enter a valid filename\n");
                exit(EXIT_FAILURE);
            } 

            /* read content of file into buffer*/
            while((n = read(fd, buffer, BUFFER_SIZE)) > 0){   
                /* print buffer*/                      
                write(STDIN_FILENO, buffer, n); 
            }
            printf("\n");
            printf("\n");

            /* close file*/
            close(fd);

            /* free memory */
            free(buffer);
            buffer = NULL;
        }
        /* get finish time of operation */
        gettimeofday(&t2, NULL);

        /* calculate total andd average times*/
        totTime = 1000000 * (t2.tv_sec - t1.tv_sec);
        totTime += (t2.tv_usec - t1.tv_usec); 
        avgTime = totTime / loops;

        /* display elapsed time for operations */
        printf("loops: %d\n",loops);
        printf("elapsed time (usecs): %ld\n",totTime);
        printf("average time per loop (usecs): %ld\n",avgTime);
    }
    else {
        printf("No file submitted\n");
    }
    exit(EXIT_SUCCESS);
}


******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task3 -i words.txt name
flags=0; tfnd=0; nsecs=0; fflags=1; optind=3
name argument = name
filename argument = words.txt
these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:

...etc...

these are some words to print
they are written on separate lines
they contain some letters and numb3rs
also some punctuation. and characters!
i wonder what "quotation marks' do:

loops: 100000
elapsed time (usecs): 5275368
average time per loop (usecs): 52



CHECKPOINT 4:
******* Source Code *******
#include <unistd.h>     // posix library
#include <stdlib.h>     // standard library
#include <stdio.h>      // standard input/output
#include <fcntl.h>      // for open() constants
#include <sys/time.h>   // for gettimeofday()
#include <sys/types.h>  // for stat()
#include <sys/stat.h>   // for stat()
#include <time.h>       // for ctime()

void usage(const char *str){
    fprintf(stderr, "Usage: %s [-i filename]\n", str);
}

int main(int argc, char *argv[]){
    // I removed a bunch of variables and options that weren't being used anymore
    const char *TASK = "./task4";
    int flags, opt;
    char *filename;
    flags = 0;
    filename = "";

    while ((opt = getopt(argc, argv, "i:")) != -1){
        switch (opt){
        case 'i':
            filename = optarg;
            flags = 1;
            break;
        case '?':
            usage(TASK);
            exit(EXIT_FAILURE);
        default:
            usage(TASK);
            exit(EXIT_FAILURE);
        }
    }
    printf("flags=%d; optind=%d\n", flags, optind);

    if (flags){
        printf("filename argument = %s\n", filename);

        /* declare variables and get start time of operation */
        long totTime = 0;
        struct timeval t1;
        struct timeval t2;
        struct stat file;
        gettimeofday(&t1, NULL);
        
        // lots of the following section adapted from the stat() man page
        
        // check if stat returns an error (i.e. incorrect filename)
        if (stat(filename, &file) == -1) {
            perror("stat");
            exit(EXIT_FAILURE);
        }

        printf("ID of containing device:  [%lx,%lx]\n", (long)major(file.st_dev),(long) minor(file.st_dev));

        // switch on bitwise & on the bit mask S_IFMT and the filetype masks below
        printf("File type:                ");
        switch (file.st_mode & S_IFMT) {
            case S_IFBLK:  printf("block device\n");            break;
            case S_IFCHR:  printf("character device\n");        break;
            case S_IFDIR:  printf("directory\n");               break;
            case S_IFIFO:  printf("FIFO/pipe\n");               break;
            case S_IFLNK:  printf("symlink\n");                 break;
            case S_IFREG:  printf("regular file\n");            break;
            case S_IFSOCK: printf("socket\n");                  break;
            default:       printf("unknown?\n");                break;
        }

        // print all other details stored in the stat struct
        printf("I-node number:            %ld\n", (long) file.st_ino);
        printf("Mode:                     %lo (octal)\n", (unsigned long) file.st_mode);
        printf("Link count:               %ld\n", (long) file.st_nlink);
        printf("Ownership:                UID=%ld   GID=%ld\n", (long) file.st_uid, (long) file.st_gid);
        printf("Preferred I/O block size: %ld bytes\n", (long) file.st_blksize);
        printf("File size:                %lld bytes\n", (long long) file.st_size);
        printf("Blocks allocated:         %lld\n",(long long) file.st_blocks);

        // struct stat has three struct timespec elements: ctime, atime and mtime
        // these timespec structs hold time_t seconds and long nanoseconds which represent time since the "Epoch", in 1970. 
        // a macro defines calls to these structs as calls to the tv_sec time_t variable inside them
        // when passed to ctime, it converts the time_t variables into a date string (null terminated)
        printf("Last status change:       %s", ctime(&file.st_ctime));
        printf("Last file access:         %s", ctime(&file.st_atime));
        printf("Last file modification:   %s", ctime(&file.st_mtime));
            
        /* get finish time of operation */
        gettimeofday(&t2, NULL);

        /* calculate total time taken*/
        totTime = 1000000 * (t2.tv_sec - t1.tv_sec);
        totTime += (t2.tv_usec - t1.tv_usec); 

        /* display elapsed time for operations */
        printf("elapsed time (usecs): %ld\n",totTime);
    }
    else {
        printf("No file submitted\n");
        usage(TASK);
    }
    exit(EXIT_SUCCESS);
}


******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task4
flags=0; optind=1
No file submitted
Usage: ./task4 [-i filename]

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task4 -i
./task4: option requires an argument -- 'i'
Usage: ./task4 [-i filename]

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task4 -i name
flags=1; optind=3
filename argument = name
stat: No such file or directory

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task4 -i words.txt
flags=1; optind=3
filename argument = words.txt
ID of containing device:  [8,2]
File type:                regular file
I-node number:            38493
Mode:                     100644 (octal)
Link count:               1
Ownership:                UID=1000   GID=1001
Preferred I/O block size: 4096 bytes
File size:                177 bytes
Blocks allocated:         8
Last status change:       Fri May 22 12:58:50 2020
Last file access:         Fri May 22 12:58:50 2020
Last file modification:   Fri May 22 12:58:50 2020
elapsed time (usecs): 123


CHECKPOINT 5:
******* Source Code *******
#include <stdio.h> 
#include <sys/time.h>   // for gettimeofday()
#include "ctap.h"       // for ctap tests


/* functions */
/* iterate through loops loops, return value of i */
long long iterate(long long loops){
    int i;
    for(i = 0; i < loops; i++){
        for(int j = 0; j < 1000; j++){}     // slow down the loops a bit, something was breaking at 10,000,000,000 loops
    }
    return i;
}

/* load start time in timeval struct, return success 1, or fail 0 */
int start(struct timeval *t){
    gettimeofday(t, NULL);
    if(t!=NULL){
        return 1;
    }
    return 0;
}

/* load stop time in timeval struct, return success 1, or fail 0 */
int stop(struct timeval *t){
    gettimeofday(t, NULL);
    if(t!=NULL){
        return 1;
    }
    return 0;
}

/* return difference in secs between two timevals */
float difference(struct timeval *t1, struct timeval *t2){
    float time;
    time = t2->tv_sec - t1->tv_sec;
    time += (float)(t2->tv_usec - t1->tv_usec)/1000000; // convert microseconds to seconds
    return time;
}

TESTS{   
    /* define appropriate structures */
    struct timeval startTime;
    struct timeval stopTime;
    float diffTime = 0;
    long long loops = 20000000;          // I increased loop by * 10 each time, then * 2 the last time. See CLI printouts.                       
    char timetaken[50];

    /* record time taken to iterate over loops loops */
    //note("Time to compute steps");                            // note() doesn't work because ctap.h is grabbing stdout.
    //ctap_diag(CTAP.priv_stdout, "Time to compute steps");     // ctap_diag() (which is what note() is defined as) only works if stdout is changed to CTAP's priv stdout. 
    
    diag("Time to compute with loops = %lld", loops);           // Replaced with diag(), which prints to stderr. 
    ok(start(&startTime) == 1, "get the start time");           // test whether load start time worked
    ok(iterate(loops) == loops, "iterate through the loop");    // test whether iteration worked
    ok(stop(&stopTime) == 1, "get the stop time");              // test whether load stop time worked

    /* compute elapsed time and convert to string */
    diffTime = difference(&startTime, &stopTime);
    sprintf(timetaken,"%f seconds", diffTime);
    diag("Compute time taken %s", timetaken);                   // note() replaced with diag()

    /* use the appropriate time unit for comparison */
    ok(diffTime < 60, "time was less than 60 seconds");         // test whether timetaken is less than 60 seconds

}



******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop04$ ./task5
# Time to compute with loops = 100,000
ok 1 - get the start time
ok 2 - iterate through the loop
ok 3 - get the stop time
# Compute time taken 0.354806 seconds
ok 4 - time was less than 60 seconds
1..4

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task5
# Time to compute with loops = 1,000,000
ok 1 - get the start time
ok 2 - iterate through the loop
ok 3 - get the stop time
# Compute time taken 3.807363 seconds
ok 4 - time was less than 60 seconds
1..4

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task5
# Time to compute with loops = 10,000,000
ok 1 - get the start time
ok 2 - iterate through the loop
ok 3 - get the stop time
# Compute time taken 37.353291 seconds
ok 4 - time was less than 60 seconds
1..4

student@student64:~/CompNetworks2020/labwork/workshop04$ ./task5
# Time to compute with loops = 20,000,000
ok 1 - get the start time
ok 2 - iterate through the loop
ok 3 - get the stop time
# Compute time taken 74.270805 seconds
not ok 4 - time was less than 60 seconds
#   Failed test 'time was less than 60 seconds'
#   at task5.c line 65.
1..4
# Looks like you failed 1 test of 4.




******* Makefile *******
all: task1 task2 task3 task4 task5

task1: task1.c
	gcc task1.c -o task1 -Wall

task2: task2.c
	gcc task2.c -o task2 -Wall

task3: task3.c
	gcc task3.c -o task3 -Wall

task4: task4.c
	gcc task4.c -o task4 -Wall

task5: task5.c
	gcc task5.c -o task5 -Wall

clean: 
	rm task1 task2 task3 task4 task5

