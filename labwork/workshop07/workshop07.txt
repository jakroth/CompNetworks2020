WORKSHOP 7                        ENGR9881 - Computer Networks
Name: Joel Pillar-Rogers
FAN: pill0032
Date: 13/06/2020


MAKEFILE:
******* Makefile *******
# 
# File : Makefile
# Author: Joel Pillar-Rogers
# Acknowledgment: adapted from a makefile by Amine Amanzou 
# https://github.com/amineamanzou/UDP-TCP-File-Transfer
#
## Created on 13 June 2020
#
#

CC = gcc

CFLAGS = -Wall

# variables for the .c files. 
C_TCPCLT = tcpclient.c
C_TCPSRV = tcpserver.c
C_UDPCLT = udpclient.c
C_UDPSRV = udpserver.c
C_TSTCLT = testclient.c

# variables for the a.out files. 
A_TCPCLT = tcpclient
A_TCPSRV = tcpserver
A_UDPCLT = udpclient
A_UDPSRV = udpserver
A_TSTCLT = testclient

all: ${A_TCPCLT} ${A_TCPSRV} ${A_UDPCLT} ${A_UDPSRV} ${A_TSTCLT}

tcp: ${A_TCPCLT} ${A_TCPSRV} 

udp: ${A_UDPCLT} ${A_UDPSRV}

test: ${A_TSTCLT} ${A_UDPSRV}

# make commands for individual files
${A_TCPCLT}: ${C_TCPCLT}
	$(CC) $(CFLAGS) -o ${A_TCPCLT} ${C_TCPCLT}

${A_TCPSRV}: ${C_TCPSRV}
	$(CC) $(CFLAGS) -o ${A_TCPSRV} ${C_TCPSRV}

${A_UDPCLT}: ${C_UDPCLT}
	$(CC) $(CFLAGS) -o ${A_UDPCLT} ${C_UDPCLT}

${A_UDPSRV}: ${C_UDPSRV}
	$(CC) $(CFLAGS) -o ${A_UDPSRV} ${C_UDPSRV}

${A_TSTCLT}: ${C_TSTCLT}
	$(CC) $(CFLAGS) -o ${A_TSTCLT} ${C_TSTCLT}

# remove all binaries, ~files and clt transmitted data files
clean:
	-rm -fv ${OFILES} ${A_TCPCLT} ${A_TCPSRV} ${A_UDPCLT} ${A_UDPSRV} ${A_TSTCLT} *~ clt.*
                 
proper: clean all

#these commands are not the names of files, they are just commands 
#so .PHONY means the makefile will always run them, won't check to see if there's a file that needs to be updated
.PHONY: all clean proper tcp udp test

# fin du Makefile (left in some French :))



TASK 1:
******* Source Code *******
/*
 * File : udpserver.c
 * 
 * Author: Joel Pillar-Rogers
 * 
 * Acknowledgment: adapted from a project by Amine Amanzou 
 * https://github.com/amineamanzou/UDP-TCP-File-Transfer
 * 
 * Created on 30 May 2020
 *
 * Under GNU Licence
 */

#include <stdio.h>
#include <stdlib.h>

// Time function, sockets, htons... file stat
#include <sys/time.h>
#include <time.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/stat.h>

// File function and bzero
#include <fcntl.h>
#include <unistd.h>
#include <strings.h>

/* Buffer size used to send the file in several blocks */
#define BUFFER 512

/* Declaration of functions*/
int create_server_socket (int port, char *ipaddr);

// Structs to hold details about the server socket details and client details
struct sockaddr_in sock_serv,clt;

int main (int argc, char**argv){
    // file descriptors
	int fd, sfd, port, opt, flag = 0, conn_count = 1;
	char buffer[BUFFER];
	long long count = 0, n;
	off_t m; // long type
	char filename[256], rtn_string[50];
    unsigned int l=sizeof(struct sockaddr_in);
	char * ip_address = "127.0.0.1";
	
    // variables to save the date
	time_t intps;
	struct tm* tmi;
    
	// checks there are exactly 1 or 3 arguments provided on the command line
	if(!(argc == 3 || argc == 1)){
		printf("Usage error: %s [-p port_serv]\n",argv[0]);
		return EXIT_FAILURE;
	}
	// check to see if a port number was specified. if not, use 23456.
	while ((opt = getopt(argc, argv, "p:")) != -1){
        switch (opt){
        case 'p':
			port = atoi(optarg);
			flag = 1;
            break;
        case '?':
			printf("Usage error: %s [-p port_serv]\n",argv[0]);
            exit(EXIT_FAILURE);
        }
    }
	// uses a default port if not set in the command line
	if(flag == 0){
		port = 23456;
	}

	// checks that the port number is in the appropriate range, ports above 1024 can be accessed in user space
	if(port < 10000 || port > 59999){
		printf("Usage error: port_serv must be between 10000-59999");
	}

	printf("Listening on IP: %s and port: %d\n",ip_address,port);

	// loop to accept multiple connections
	while(1){
		// calls the create server socket function, using the port address of the server 
		// and stores the returned socket file descriptor in sfd
		sfd = create_server_socket(port, ip_address);

		// grab the current time
		intps = time(NULL);
		// convert those seconds to a tm struct called tmi
		tmi = localtime(&intps);
		// assign the time info into the string filename, this creates a unique filename for every connection
		sprintf(filename,"clt.%d.%d.%d.%d.%d.%d",tmi->tm_mday,tmi->tm_mon+1,1900+tmi->tm_year,tmi->tm_hour,tmi->tm_min,tmi->tm_sec);
		
		// open filename (create it first) in write only mode, but make the file read/write for the user
		// the file is opened on file descriptor fd
		if((fd=open(filename,O_CREAT|O_WRONLY|O_TRUNC,0600))==-1){
			perror("open fail");
			return EXIT_FAILURE;
		}
		
		// ***preparing to receive datagrams
		// bzero sets all the bytes in the buffer to zero
		bzero(buffer,BUFFER);

		// reads BUFFER bytes from sfd into buffer and saves the source ip address and port in clt
		// waits on recvfrom until datagram is received
		n=recvfrom(sfd,buffer,BUFFER,0,(struct sockaddr *)&clt,&l);

		// while there are bytes to read
		while(n){
			if(n==-1){
				perror("read fails");
				return EXIT_FAILURE;
			}
			// cumulative count of bytes read and written
			count+=n;

			//write the bytes from buffer into the unique file for this connection
			if((m=write(fd,buffer,n))==-1){
				perror("write fail");
				exit(6);
			}
			// clear the buffer
			bzero(buffer,BUFFER);

			// read the next packet from the connection socket
			// continues until there is nothing else on the listening socket
			n=recvfrom(sfd,&buffer,BUFFER,0,(struct sockaddr *)&clt,&l);
		}
		// close the open file
		close(fd);

		// clear the buffer
		bzero(buffer,BUFFER);

		// opens the file just created, prints an error if unsuccessful
		if((fd = open(filename,O_RDONLY))==-1){
			perror("open fail");
			return EXIT_FAILURE;
		}

		// reads the first 512 bytes from the file into the buffer
		read(fd,buffer,BUFFER);

		// convert the first 512 bytes into a string so it can be sent to the client 
		sprintf(rtn_string,"%s",buffer);

		// send the first 512 bytes as a response to the client
		// ref: https://www.geeksforgeeks.org/udp-server-client-implementation-c/
		sendto(sfd,rtn_string,sizeof(rtn_string),MSG_CONFIRM,(struct sockaddr*)&clt,l);

		// close the server socket 
		close(sfd);

		// get the IP address from the clt connection
		// need to convert from an in_addr network address struct to a character string 
		char clt_ip[20];
		inet_ntop(AF_INET,&clt.sin_addr, clt_ip, 20);

		// print the connection number, total number of bytes received, IP address and port number of client
		printf("Connection: \"%d\", data received: \"%s\", from IP: \"%s\", on port: \"%d\" \n",conn_count,rtn_string,clt_ip,clt.sin_port);

		// reset the data counter and connection loop counter
		conn_count++;
		count = 0;

		// sleep for 1 second to make sure the server is ready to receive the next connections
		sleep(1);
	}

	return EXIT_SUCCESS;
}

/* Function allowing the creation of a socket and its attachment to the system
 * Returns a file descriptor in the process descriptor table
 * bind() allows its definition with the system
 */
int create_server_socket (int port, char *ipaddr){
    int l;
	int sfd;

    // *****setting up the local socket
	// this sets up a socket, the first step in allowing a connection
	// uses the ip4 address family and the UDP socket datagram (and the default protocol, 0)
	// assigns a file descriptor integer to sfd, for use in main
	sfd = socket(AF_INET,SOCK_DGRAM,0);
	if (sfd == -1){
        perror("socket fail");
        return EXIT_FAILURE;
	}
    
    // *****preparing the server socket address and server socket
	// finds the size of a sockadd_in struct
	l=sizeof(struct sockaddr_in);
	// zeroes the struct so no info is hanging around
	bzero(&sock_serv,l);
	
	// sets the sock_serv address family to use the ip4 protocol	
	// ref: https://www.tutorialspoint.com/unix_sockets/socket_structures.htm
	sock_serv.sin_family=AF_INET;

	// sets the port number of the sock_serv struct to the command line port_serv argument
	// needs to have a conversion from host byte order to network byte order, which htons does
	sock_serv.sin_port=htons(port);

	// *** currently not used ***
	// sets the ip address of the sock_serv struct to all local interfaces (rather than a specific local IP address)
    // needs to have a conversion from host byte order to network byte order, which htonl does
	//sock_serv.sin_addr.s_addr=htonl(INADDR_ANY);
    
	// sets the ip address of the sock_serv struct to the loopback address
	// the inet_pton function converts a character string ip address to an in_addr network address struct
    if (inet_pton(AF_INET,ipaddr,&sock_serv.sin_addr)==0){
		printf("Invalid IP adress\n");
		return EXIT_FAILURE;
	}

	// assign an identity (sockaddr struct) to the local socket created above
    // gives the socket an IP address and port interface to bind to, on which it will listen for incoming datagrams
	if(bind(sfd,(struct sockaddr*)&sock_serv,l)==-1){
		perror("bind fail");
		return EXIT_FAILURE;
	}
    
	// return the file descriptor number of the local socket   
    return sfd;
}


******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop06$ ./udpserver -p 23456
Listening on IP: 127.0.0.1 and port: 23456
Connection: "1", data received: "75506829", from IP: "127.0.0.1", on port: "8581" 
Connection: "2", data received: "34180107", from IP: "127.0.0.1", on port: "18641" 
Connection: "3", data received: "61216974", from IP: "127.0.0.1", on port: "25763" 
Connection: "4", data received: "37528393", from IP: "127.0.0.1", on port: "20371" 
Connection: "5", data received: "96590849", from IP: "127.0.0.1", on port: "9142" 






TASK 2:
******* Source Code *******
/*
 * File : udpclient.c
 * 
 * Author: Joel Pillar-Rogers
 * 
 * Acknowledgment: adapted from a project by Amine Amanzou 
 * https://github.com/amineamanzou/UDP-TCP-File-Transfer
 * 
 * Created on 30 May 2020
 *
 * Under GNU Licence
 */

#include <stdio.h>
#include <stdlib.h>

// Time function, sockets, htons... file stat
#include <sys/time.h>
#include <time.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <sys/stat.h>

// File functions and bzero
#include <fcntl.h>
#include <unistd.h>
#include <strings.h> // for bzero

// Testing
#include "ctap.h"


/* Declaration of functions*/
int duration (struct timeval *start,struct timeval *stop, struct timeval *delta);
int setup_server_socket (int port, char* ipaddr, struct sockaddr_in *sock_serv);

TESTS{  
    /* Declaration of structures and variables */
    // Struct to hold time details for timing the ping
    struct timeval start, stop, delta;
    // Struct to hold details about the destination server socket 
    struct sockaddr_in sock_serv;
    //size of the server address struct, used in the sendto function
    int l=sizeof(struct sockaddr_in);
    // variable for the socket file descriptor
    int sfd;
    // int and char * for storing the destination server details
    int port = 23456;
	char * ipaddr = "127.0.0.1";
    // variables to hold the message and return message (will be a random 8 numbers)
    long message = 0;
    char message_str[10];
    char rtn_message[10];
    // for holding the number of bytes transmitted and received
    off_t m; 

	// get the start time, before commencing socket setup and message transmission
	ok(gettimeofday(&start,NULL) == 0, "get the start time");

    // setting up the local socket
	// uses the ip4 address family and the UDP connectionless sock datagram (and the default protocol, 0)
	// assigns a file descriptor integer to sfd, for sending out later on
    sfd = socket(AF_INET,SOCK_DGRAM,0);
	ok(sfd >= 0, "setup the local socket");    

    // calls the setup server socket function, using the port and ip address of the destination server 
	ok(setup_server_socket(port, ipaddr, &sock_serv) >= 0, "populate the server destination struct");

    // checks that the destination port was setup correctly in the previous function
    cmp_ok(port, "==", ntohs(sock_serv.sin_port), "destination port was setup correctly");
    
    // checks that the destination IP address was setup correctly in the previous function
    // need to convert from an in_addr network address struct to a character string 
    char ip_str[12];
	inet_ntop(AF_INET, &sock_serv.sin_addr, ip_str, INET_ADDRSTRLEN);
    is(ipaddr, ip_str,"destination IP address was setup correctly");

    // print this message, confirms we are targeting the right location
    diag("******Pinging %s:%d*******",ipaddr,port);

	// initialise random number generator, using the start time
    // this will create a different random seed each time
	srand((unsigned)time(&(start.tv_sec)));
    // obtain a random number (range 10,000,000 to 99,999,999)
    message = rand() % 90000000 + 10000000; 
    sprintf(message_str,"%ld",message);

    // print the message
    diag("Message to send: %s", message_str);

    // send the message to the destination server
    // sfd is the local sending socket, message is where the data is
    // sock_serv is the destination address, and l is the type of address of sock_serv (by it's size)
    // m will hold the number of bytes sent each time
    // sendto will also bind this socket to an ip/port, automatically assigned, which will be used to receive messages later on
    ok(m=sendto(sfd,message_str,sizeof(message_str),0,(struct sockaddr*)&sock_serv,l) > 0, "sent the message to the server");

    // unlock the server by sending 0 bytes, signifying end of file
	ok(m=sendto(sfd,NULL,0,0,(struct sockaddr*)&sock_serv,l) == 0, "sent message to unlock the server, indicating last datagram");

    // wait for a response from the server
    // reads 8 bytes from sfd into rtn_message, don't bother to save server details (don't need them)
    // ref: https://www.geeksforgeeks.org/udp-server-client-implementation-c/
    ok(m=recvfrom(sfd,rtn_message,8,0,NULL,NULL) == 8, "received return message from server");

    // check that the returned string matches the transmitted string
    is(rtn_message,message_str,"return data matches sent data");

    // print the return message
    diag("Message from server: %s", rtn_message);

    // get the stop time, after message transmission
	ok(gettimeofday(&stop,NULL) == 0, "got the stop time");

	//calculates the duration of packet sending
	ok(duration(&start,&stop,&delta) == 0, "calculated the duration of sending");

    // display the times for start, stop and duration
    diag("Start time: %ld.%ld, Stop time: %ld.%ld, Duration: %ld.%ld", start.tv_sec,start.tv_usec,stop.tv_sec,stop.tv_usec,delta.tv_sec,delta.tv_usec);

    ok(delta.tv_usec < 1000000, "time taken was less than 1 second");    
}


/* Function to setup the destination server sockaddr_in struct */
int setup_server_socket (int port, char* ipaddr, struct sockaddr_in * sock_serv){
    
    // finds the size of a sockaddr_in struct
	int l=sizeof(struct sockaddr_in);

	// zeroes the struct so no info is hanging around
	bzero(sock_serv,l);
	
	// sets the sock_serv address family to use the ip4 protocol	
	// ref: https://www.tutorialspoint.com/unix_sockets/socket_structures.htm
	sock_serv->sin_family=AF_INET;

	// sets the port number of the sock_serv struct to the command line port_serv argument
	// needs to have a conversion from host byte order to network byte order, which htons does
	sock_serv->sin_port=htons(port);

    // sets the ip address of the sock_serv struct to the command line ip_serv argument
	// the inet_pton function converts a character string ip address to an in_addr network address struct
    struct in_addr temp;
    if (inet_pton(AF_INET,ipaddr,&temp)==0){
		printf("Invalid IP adress\n");
		return EXIT_FAILURE;
	}
    sock_serv->sin_addr = temp;

    return 1;
}


/* Function to calculate the duration of the sending. */
int duration (struct timeval *start,struct timeval *stop,struct timeval *delta)
{
	// these are just longs
    suseconds_t microstart, microstop, microdelta;
    
	// calculate the difference between the start and stop timeval structs
    microstart = (suseconds_t) (100000*(start->tv_sec))+ start->tv_usec;
    microstop = (suseconds_t) (100000*(stop->tv_sec))+ stop->tv_usec;
    microdelta = microstop - microstart;
    
	// set the values of the delta timeval struct. uses pointers, so accessible outside this function
    delta->tv_usec = microdelta%100000;
    delta->tv_sec = (time_t)(microdelta/100000);
    
	// check for errors
    if((*delta).tv_sec < 0 || (*delta).tv_usec < 0)
        return -1;
    else
        return 0;
}


******* CLI Output *******
student@student64:~/CompNetworks2020/labwork/workshop06$ ./testclient 
ok 1 - get the start time
ok 2 - setup the local socket
ok 3 - populate the server destination struct
ok 4 - destination port was setup correctly
ok 5 - destination IP address was setup correctly
# ******Pinging 127.0.0.1:23456*******
# Message to send: 14127257
ok 6 - sent the message to the server
ok 7 - sent message to unlock the server, indicating last datagram
ok 8 - received return message from server
ok 9 - return data matches sent data
# Message from server: 14127257
ok 10 - got the stop time
ok 11 - calculated the duration of sending
# Start time: 1591072165.228052, Stop time: 1591072165.228349, Duration: 0.297
ok 12 - time taken was less than 1 second
1..12






